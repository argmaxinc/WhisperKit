name: Unit Tests

on:
  workflow_call:
    inputs:
      ios-version:
        required: true
        type: string
      macos-runner:
        required: true
        type: string

jobs:
  unit-tests:
    name: "${{ matrix.run-config['name'] }} on ${{ inputs.macos-runner }}"
    runs-on: ${{ inputs.macos-runner }}
    strategy:
      matrix:
        run-config:
          - {
              name: "macOS",
              condition: true,
              clean-destination: "generic/platform=macOS",
              test-destination: "platform=macOS,arch=arm64",
            }
          - {
              name: "iOS",
              condition: true,
              clean-destination: "generic/platform=iOS",
              test-destination: "platform=iOS Simulator,OS=${{ inputs.ios-version }},name=iPhone 15",
            }
          - {
              name: "watchOS",
              condition: "${{ inputs.macos-runner == 'macos-14' }}",
              clean-destination: "generic/platform=watchOS",
              test-destination: "platform=watchOS Simulator,OS=10.2,name=Apple Watch Ultra 2 (49mm)",
            }
          - {
              name: "visionOS",
              condition: "${{ inputs.macos-runner == 'macos-14' }}",
              clean-destination: "generic/platform=visionOS",
              test-destination: "platform=visionOS Simulator,name=Apple Vision Pro",
            }
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.2"
      - name: Setup environment
        run: make setup
      - name: Setup Cache
        id: model-cache
        uses: actions/cache@v4
        with:
          path: Models
          key: ${{ runner.os }}-models
      - name: Download Models
        if: steps.model-cache.outputs.cache-hit != 'true'
        run: make download-model MODEL=tiny
      - name: Install and discover destinations
        run: |
          xcodebuild -downloadAllPlatforms
          echo "Destinations for testing:"
          xcodebuild test-without-building -only-testing WhisperKitTests/UnitTests -scheme whisperkit-Package -showdestinations
      - name: Build and Test - ${{ matrix.run-config['name'] }}
        if: ${{ matrix.run-config['condition'] == true }}
        run: |
          set -o pipefail
          xcodebuild clean build-for-testing -scheme whisperkit-Package -destination '${{ matrix.run-config['clean-destination'] }}' | xcpretty
          xcodebuild test -only-testing WhisperKitTests/UnitTests -scheme whisperkit-Package -destination '${{ matrix.run-config['test-destination'] }}' | xcpretty
