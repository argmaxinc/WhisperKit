// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    func createTranscription(_ input: Operations.createTranscription.Input) async throws -> Operations.createTranscription.Output
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    func createTranslation(_ input: Operations.createTranslation.Input) async throws -> Operations.createTranslation.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    internal func createTranscription(
        headers: Operations.createTranscription.Input.Headers = .init(),
        body: Operations.createTranscription.Input.Body
    ) async throws -> Operations.createTranscription.Output {
        try await createTranscription(Operations.createTranscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    internal func createTranslation(
        headers: Operations.createTranslation.Input.Headers = .init(),
        body: Operations.createTranslation.Input.Body
    ) async throws -> Operations.createTranslation.Output {
        try await createTranslation(Operations.createTranslation.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest`.
        internal enum CreateTranscriptionRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/file`.
            internal struct filePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.filePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/model`.
            internal struct modelPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/language`.
            internal struct languagePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `languagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case language(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.languagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/prompt`.
            internal struct promptPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `promptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.promptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/response_format`.
            internal struct response_formatPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/temperature`.
            internal struct temperaturePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `temperaturePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case temperature(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.temperaturePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/include[]`.
            internal struct include_lbrack__rbrack_Payload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `include_lbrack__rbrack_Payload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case include_lbrack__rbrack_(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.include_lbrack__rbrack_Payload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/timestamp_granularities[]`.
            internal struct timestamp_granularities_lbrack__rbrack_Payload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `timestamp_granularities_lbrack__rbrack_Payload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case timestamp_granularities_lbrack__rbrack_(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.timestamp_granularities_lbrack__rbrack_Payload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/stream`.
            internal struct streamPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `streamPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case stream(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.streamPayload>)
        }
        /// Represents a transcription response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson`.
        internal struct CreateTranscriptionResponseJson: Codable, Hashable, Sendable {
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/text`.
            internal var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobsPayload`.
            internal struct logprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token in the transcription.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobsPayload/token`.
                internal var token: Swift.String?
                /// The log probability of the token.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobsPayload/logprob`.
                internal var logprob: Swift.Double?
                /// The bytes of the token.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobsPayload/bytes`.
                internal var bytes: [Swift.Double]?
                /// Creates a new `logprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token in the transcription.
                ///   - logprob: The log probability of the token.
                ///   - bytes: The bytes of the token.
                internal init(
                    token: Swift.String? = nil,
                    logprob: Swift.Double? = nil,
                    bytes: [Swift.Double]? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                internal enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobs`.
            internal typealias logprobsPayload = [Components.Schemas.CreateTranscriptionResponseJson.logprobsPayloadPayload]
            /// The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobs`.
            internal var logprobs: Components.Schemas.CreateTranscriptionResponseJson.logprobsPayload?
            /// The type of response
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case CreateTranscriptionResponseJson = "CreateTranscriptionResponseJson"
            }
            /// The type of response
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/type`.
            internal var _type: Components.Schemas.CreateTranscriptionResponseJson._typePayload
            /// Creates a new `CreateTranscriptionResponseJson`.
            ///
            /// - Parameters:
            ///   - text: The transcribed text.
            ///   - logprobs: The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
            ///   - _type: The type of response
            internal init(
                text: Swift.String,
                logprobs: Components.Schemas.CreateTranscriptionResponseJson.logprobsPayload? = nil,
                _type: Components.Schemas.CreateTranscriptionResponseJson._typePayload
            ) {
                self.text = text
                self.logprobs = logprobs
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case text
                case logprobs
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseStreamEvent`.
        internal struct CreateTranscriptionResponseStreamEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseStreamEvent/value1`.
            internal var value1: Components.Schemas.TranscriptTextDeltaEvent?
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseStreamEvent/value2`.
            internal var value2: Components.Schemas.TranscriptTextDoneEvent?
            /// Creates a new `CreateTranscriptionResponseStreamEvent`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            internal init(
                value1: Components.Schemas.TranscriptTextDeltaEvent? = nil,
                value2: Components.Schemas.TranscriptTextDoneEvent? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
            }
        }
        /// Represents a verbose json transcription response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson`.
        internal struct CreateTranscriptionResponseVerboseJson: Codable, Hashable, Sendable {
            /// The language of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/language`.
            internal var language: Swift.String
            /// The duration of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/duration`.
            internal var duration: Swift.Double
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/text`.
            internal var text: Swift.String
            /// Extracted words and their corresponding timestamps.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/words`.
            internal var words: [Components.Schemas.TranscriptionWord]?
            /// Segments of the transcribed text and their corresponding details.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/segments`.
            internal var segments: [Components.Schemas.TranscriptionSegment]?
            /// The type of response
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case CreateTranscriptionResponseVerboseJson = "CreateTranscriptionResponseVerboseJson"
            }
            /// The type of response
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/type`.
            internal var _type: Components.Schemas.CreateTranscriptionResponseVerboseJson._typePayload
            /// Creates a new `CreateTranscriptionResponseVerboseJson`.
            ///
            /// - Parameters:
            ///   - language: The language of the input audio.
            ///   - duration: The duration of the input audio.
            ///   - text: The transcribed text.
            ///   - words: Extracted words and their corresponding timestamps.
            ///   - segments: Segments of the transcribed text and their corresponding details.
            ///   - _type: The type of response
            internal init(
                language: Swift.String,
                duration: Swift.Double,
                text: Swift.String,
                words: [Components.Schemas.TranscriptionWord]? = nil,
                segments: [Components.Schemas.TranscriptionSegment]? = nil,
                _type: Components.Schemas.CreateTranscriptionResponseVerboseJson._typePayload
            ) {
                self.language = language
                self.duration = duration
                self.text = text
                self.words = words
                self.segments = segments
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case language
                case duration
                case text
                case words
                case segments
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest`.
        internal enum CreateTranslationRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/file`.
            internal struct filePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.filePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/model`.
            internal struct modelPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/prompt`.
            internal struct promptPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `promptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.promptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/response_format`.
            internal struct response_formatPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/temperature`.
            internal struct temperaturePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `temperaturePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case temperature(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.temperaturePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/language`.
            internal struct languagePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `languagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case language(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.languagePayload>)
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseJson`.
        internal struct CreateTranslationResponseJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseJson/text`.
            internal var text: Swift.String
            /// Creates a new `CreateTranslationResponseJson`.
            ///
            /// - Parameters:
            ///   - text:
            internal init(text: Swift.String) {
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson`.
        internal struct CreateTranslationResponseVerboseJson: Codable, Hashable, Sendable {
            /// The language of the output translation (always `english`).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/language`.
            internal var language: Swift.String
            /// The duration of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/duration`.
            internal var duration: Swift.Double
            /// The translated text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/text`.
            internal var text: Swift.String
            /// Segments of the translated text and their corresponding details.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/segments`.
            internal var segments: [Components.Schemas.TranscriptionSegment]?
            /// Creates a new `CreateTranslationResponseVerboseJson`.
            ///
            /// - Parameters:
            ///   - language: The language of the output translation (always `english`).
            ///   - duration: The duration of the input audio.
            ///   - text: The translated text.
            ///   - segments: Segments of the translated text and their corresponding details.
            internal init(
                language: Swift.String,
                duration: Swift.Double,
                text: Swift.String,
                segments: [Components.Schemas.TranscriptionSegment]? = nil
            ) {
                self.language = language
                self.duration = duration
                self.text = text
                self.segments = segments
            }
            internal enum CodingKeys: String, CodingKey {
                case language
                case duration
                case text
                case segments
            }
        }
        /// The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AudioResponseFormat`.
        internal enum AudioResponseFormat: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
            case text = "text"
            case srt = "srt"
            case verbose_json = "verbose_json"
            case vtt = "vtt"
        }
        /// Emitted when there is an additional text delta. This is also the first event emitted when the transcription starts. Only emitted when you [create a transcription](/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`.
        ///
        /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent`.
        internal struct TranscriptTextDeltaEvent: Codable, Hashable, Sendable {
            /// The type of the event. Always `transcript.text.delta`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case transcript_period_text_period_delta = "transcript.text.delta"
            }
            /// The type of the event. Always `transcript.text.delta`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/type`.
            internal var _type: Components.Schemas.TranscriptTextDeltaEvent._typePayload
            /// The text delta that was additionally transcribed.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/delta`.
            internal var delta: Swift.String
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobsPayload`.
            internal struct logprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token that was used to generate the log probability.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobsPayload/token`.
                internal var token: Swift.String?
                /// The log probability of the token.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobsPayload/logprob`.
                internal var logprob: Swift.Double?
                /// The bytes that were used to generate the log probability.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobsPayload/bytes`.
                internal var bytes: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Creates a new `logprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token that was used to generate the log probability.
                ///   - logprob: The log probability of the token.
                ///   - bytes: The bytes that were used to generate the log probability.
                internal init(
                    token: Swift.String? = nil,
                    logprob: Swift.Double? = nil,
                    bytes: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                internal enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// The log probabilities of the delta. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobs`.
            internal typealias logprobsPayload = [Components.Schemas.TranscriptTextDeltaEvent.logprobsPayloadPayload]
            /// The log probabilities of the delta. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobs`.
            internal var logprobs: Components.Schemas.TranscriptTextDeltaEvent.logprobsPayload?
            /// Creates a new `TranscriptTextDeltaEvent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the event. Always `transcript.text.delta`.
            ///   - delta: The text delta that was additionally transcribed.
            ///   - logprobs: The log probabilities of the delta. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            internal init(
                _type: Components.Schemas.TranscriptTextDeltaEvent._typePayload,
                delta: Swift.String,
                logprobs: Components.Schemas.TranscriptTextDeltaEvent.logprobsPayload? = nil
            ) {
                self._type = _type
                self.delta = delta
                self.logprobs = logprobs
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case delta
                case logprobs
            }
        }
        /// Emitted when the transcription is complete. Contains the complete transcription text. Only emitted when you [create a transcription](/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`.
        ///
        /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent`.
        internal struct TranscriptTextDoneEvent: Codable, Hashable, Sendable {
            /// The type of the event. Always `transcript.text.done`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case transcript_period_text_period_done = "transcript.text.done"
            }
            /// The type of the event. Always `transcript.text.done`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/type`.
            internal var _type: Components.Schemas.TranscriptTextDoneEvent._typePayload
            /// The text that was transcribed.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/text`.
            internal var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobsPayload`.
            internal struct logprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token that was used to generate the log probability.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobsPayload/token`.
                internal var token: Swift.String?
                /// The log probability of the token.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobsPayload/logprob`.
                internal var logprob: Swift.Double?
                /// The bytes that were used to generate the log probability.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobsPayload/bytes`.
                internal var bytes: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Creates a new `logprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token that was used to generate the log probability.
                ///   - logprob: The log probability of the token.
                ///   - bytes: The bytes that were used to generate the log probability.
                internal init(
                    token: Swift.String? = nil,
                    logprob: Swift.Double? = nil,
                    bytes: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                internal enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobs`.
            internal typealias logprobsPayload = [Components.Schemas.TranscriptTextDoneEvent.logprobsPayloadPayload]
            /// The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobs`.
            internal var logprobs: Components.Schemas.TranscriptTextDoneEvent.logprobsPayload?
            /// Creates a new `TranscriptTextDoneEvent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the event. Always `transcript.text.done`.
            ///   - text: The text that was transcribed.
            ///   - logprobs: The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            internal init(
                _type: Components.Schemas.TranscriptTextDoneEvent._typePayload,
                text: Swift.String,
                logprobs: Components.Schemas.TranscriptTextDoneEvent.logprobsPayload? = nil
            ) {
                self._type = _type
                self.text = text
                self.logprobs = logprobs
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case logprobs
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionInclude`.
        internal enum TranscriptionInclude: String, Codable, Hashable, Sendable, CaseIterable {
            case logprobs = "logprobs"
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionSegment`.
        internal struct TranscriptionSegment: Codable, Hashable, Sendable {
            /// Unique identifier of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/id`.
            internal var id: Swift.Int
            /// Seek offset of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/seek`.
            internal var seek: Swift.Int
            /// Start time of the segment in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/start`.
            internal var start: Swift.Float
            /// End time of the segment in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/end`.
            internal var end: Swift.Float
            /// Text content of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/text`.
            internal var text: Swift.String
            /// Array of token IDs for the text content.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/tokens`.
            internal var tokens: [Swift.Int]
            /// Temperature parameter used for generating the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/temperature`.
            internal var temperature: Swift.Float
            /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/avg_logprob`.
            internal var avg_logprob: Swift.Float
            /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/compression_ratio`.
            internal var compression_ratio: Swift.Float
            /// Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/no_speech_prob`.
            internal var no_speech_prob: Swift.Float
            /// Creates a new `TranscriptionSegment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the segment.
            ///   - seek: Seek offset of the segment.
            ///   - start: Start time of the segment in seconds.
            ///   - end: End time of the segment in seconds.
            ///   - text: Text content of the segment.
            ///   - tokens: Array of token IDs for the text content.
            ///   - temperature: Temperature parameter used for generating the segment.
            ///   - avg_logprob: Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
            ///   - compression_ratio: Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
            ///   - no_speech_prob: Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
            internal init(
                id: Swift.Int,
                seek: Swift.Int,
                start: Swift.Float,
                end: Swift.Float,
                text: Swift.String,
                tokens: [Swift.Int],
                temperature: Swift.Float,
                avg_logprob: Swift.Float,
                compression_ratio: Swift.Float,
                no_speech_prob: Swift.Float
            ) {
                self.id = id
                self.seek = seek
                self.start = start
                self.end = end
                self.text = text
                self.tokens = tokens
                self.temperature = temperature
                self.avg_logprob = avg_logprob
                self.compression_ratio = compression_ratio
                self.no_speech_prob = no_speech_prob
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case seek
                case start
                case end
                case text
                case tokens
                case temperature
                case avg_logprob
                case compression_ratio
                case no_speech_prob
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionWord`.
        internal struct TranscriptionWord: Codable, Hashable, Sendable {
            /// The text content of the word.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/word`.
            internal var word: Swift.String
            /// Start time of the word in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/start`.
            internal var start: Swift.Float
            /// End time of the word in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/end`.
            internal var end: Swift.Float
            /// Creates a new `TranscriptionWord`.
            ///
            /// - Parameters:
            ///   - word: The text content of the word.
            ///   - start: Start time of the word in seconds.
            ///   - end: End time of the word in seconds.
            internal init(
                word: Swift.String,
                start: Swift.Float,
                end: Swift.Float
            ) {
                self.word = word
                self.start = start
                self.end = end
            }
            internal enum CodingKeys: String, CodingKey {
                case word
                case start
                case end
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    internal enum createTranscription {
        internal static let id: Swift.String = "createTranscription"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/transcriptions/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createTranscription.Input.Headers
            /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm`.
                internal enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/file`.
                    internal struct filePayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case file(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.filePayload>)
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/model`.
                    internal struct modelPayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `modelPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case model(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.modelPayload>)
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/language`.
                    internal struct languagePayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `languagePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case language(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.languagePayload>)
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/prompt`.
                    internal struct promptPayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `promptPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case prompt(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.promptPayload>)
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/response_format`.
                    internal struct response_formatPayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `response_formatPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case response_format(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.response_formatPayload>)
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/temperature`.
                    internal struct temperaturePayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `temperaturePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case temperature(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.temperaturePayload>)
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/include[]`.
                    internal struct include_lbrack__rbrack_Payload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `include_lbrack__rbrack_Payload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case include_lbrack__rbrack_(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.include_lbrack__rbrack_Payload>)
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/timestamp_granularities[]`.
                    internal struct timestamp_granularities_lbrack__rbrack_Payload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `timestamp_granularities_lbrack__rbrack_Payload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case timestamp_granularities_lbrack__rbrack_(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.timestamp_granularities_lbrack__rbrack_Payload>)
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/multipartForm/stream`.
                    internal struct streamPayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `streamPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case stream(OpenAPIRuntime.MultipartPart<Operations.createTranscription.Input.Body.multipartFormPayload.streamPayload>)
                }
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.createTranscription.Input.Body.multipartFormPayload>)
            }
            internal var body: Operations.createTranscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createTranscription.Input.Headers = .init(),
                body: Operations.createTranscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json`.
                    internal enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json/CreateTranscriptionResponseJson`.
                        case CreateTranscriptionResponseJson(Components.Schemas.CreateTranscriptionResponseJson)
                        /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json/CreateTranscriptionResponseVerboseJson`.
                        case CreateTranscriptionResponseVerboseJson(Components.Schemas.CreateTranscriptionResponseVerboseJson)
                        internal enum CodingKeys: String, CodingKey {
                            case _type = "type"
                        }
                        internal init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            let discriminator = try container.decode(
                                Swift.String.self,
                                forKey: ._type
                            )
                            switch discriminator {
                            case "CreateTranscriptionResponseJson", "#/components/schemas/CreateTranscriptionResponseJson":
                                self = .CreateTranscriptionResponseJson(try .init(from: decoder))
                            case "CreateTranscriptionResponseVerboseJson", "#/components/schemas/CreateTranscriptionResponseVerboseJson":
                                self = .CreateTranscriptionResponseVerboseJson(try .init(from: decoder))
                            default:
                                throw Swift.DecodingError.unknownOneOfDiscriminator(
                                    discriminatorKey: CodingKeys._type,
                                    discriminatorValue: discriminator,
                                    codingPath: decoder.codingPath
                                )
                            }
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .CreateTranscriptionResponseJson(value):
                                try value.encode(to: encoder)
                            case let .CreateTranscriptionResponseVerboseJson(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/application\/json`.
                    case json(Operations.createTranscription.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.createTranscription.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    internal var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/event-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createTranscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createTranscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createTranscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createTranscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case text_event_hyphen_stream
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .text_event_hyphen_stream
                ]
            }
        }
    }
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    internal enum createTranslation {
        internal static let id: Swift.String = "createTranslation"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/translations/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranslation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranslation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createTranslation.Input.Headers
            /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/multipartForm`.
                internal enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/multipartForm/file`.
                    internal struct filePayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case file(OpenAPIRuntime.MultipartPart<Operations.createTranslation.Input.Body.multipartFormPayload.filePayload>)
                    /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/multipartForm/model`.
                    internal struct modelPayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `modelPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case model(OpenAPIRuntime.MultipartPart<Operations.createTranslation.Input.Body.multipartFormPayload.modelPayload>)
                    /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/multipartForm/prompt`.
                    internal struct promptPayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `promptPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case prompt(OpenAPIRuntime.MultipartPart<Operations.createTranslation.Input.Body.multipartFormPayload.promptPayload>)
                    /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/multipartForm/response_format`.
                    internal struct response_formatPayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `response_formatPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case response_format(OpenAPIRuntime.MultipartPart<Operations.createTranslation.Input.Body.multipartFormPayload.response_formatPayload>)
                    /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/multipartForm/temperature`.
                    internal struct temperaturePayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `temperaturePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case temperature(OpenAPIRuntime.MultipartPart<Operations.createTranslation.Input.Body.multipartFormPayload.temperaturePayload>)
                    /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/multipartForm/language`.
                    internal struct languagePayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `languagePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case language(OpenAPIRuntime.MultipartPart<Operations.createTranslation.Input.Body.multipartFormPayload.languagePayload>)
                }
                /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.createTranslation.Input.Body.multipartFormPayload>)
            }
            internal var body: Operations.createTranslation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createTranslation.Input.Headers = .init(),
                body: Operations.createTranslation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json`.
                    internal enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json/case1`.
                        case CreateTranslationResponseJson(Components.Schemas.CreateTranslationResponseJson)
                        /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json/case2`.
                        case CreateTranslationResponseVerboseJson(Components.Schemas.CreateTranslationResponseVerboseJson)
                        internal init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .CreateTranslationResponseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CreateTranslationResponseVerboseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .CreateTranslationResponseJson(value):
                                try value.encode(to: encoder)
                            case let .CreateTranslationResponseVerboseJson(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/application\/json`.
                    case json(Operations.createTranslation.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.createTranslation.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createTranslation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createTranslation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createTranslation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createTranslation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
